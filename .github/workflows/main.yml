on:
  workflow_dispatch:

jobs:

  get-image:
    runs-on: ubuntu-latest
    #环境变量设置：https://docs.github.com/en/actions/reference/environment-variables

    env:
      DOCKER_IMAGE: rabbitmq
      DOCKER_ARCHIVE_NAME: rabbitmq-image.tar
      #设置runs-on时区
      TZ: Asia/Shanghai
    steps:

      #下载源码
      - name: Checkout Code
        uses: actions/checkout@v2

      #在runs-on环境中安装docker并下载镜像 保存成文件
      - name: Build and push Docker images
        id: download_and_archive_docker_image
        uses: docker-practice/actions-setup-docker@master
      - run: |
          pwd
          docker pull ${{ env.DOCKER_IMAGE }}
          docker images
          docker save -o ${{ env.DOCKER_ARCHIVE_NAME }} ${{ env.DOCKER_IMAGE }}
          ls
          echo '下载镜像,打包上传到release' > CHANGELOG.txt

      # 得到release名字的后缀
      - name: Get Release Name Suffix
        id: release-name-output
        # 设置时间输出变量,该变量,其他step可以获取到(需要写在一个单独的run中,如需多个变量 则为：name=p1::xx name=p2::xx )
        # https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#outputs

        run: echo '::set-output name=release_name_suffix::$(date "+%Y-%m-%d %H:%M:%S")'
        shell: bash


      # 设置tag name
      - name: Set Tag Name
        id: custom-tag-name-output
        #设置自定义tag name 本来打算直接使用 ${{ steps.current-date-output.outputs.BEGIN_TIME }}来做tag name的
        #但是由于git 的tag name 对格式有要求,因此自定义一个tag name,时间戳是秒
        run: echo '::set-output name=custom_tag_name::${{ env.DOCKER_ARCHIVE_NAME }}/$(date "+%s")'

      # 测试上上一step的输出结果
      - name: Test Step OutPuts
        run: |
          echo "CURRENT TIME IS ${{ steps.release-name-output.outputs.release_name_suffix }}"
          echo "CUSTOM TAG NAME IS ${{ steps.custom-tag-name-set.outputs.custom_tag_name }}"

      # 创建release
      - name: Create Release
        id: create_release
        #uses: actions/create-release@v1
        #这个可以删除tag,然后重建.直接使用actions/create-release@v1在tag上有些麻烦
        uses: GongT/actions-recreate-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.UPLOAD_ARCHIVE_GITHUB_TOKEN }}
        with:
          #tag_name: ${{ github.ref }}
          tag_name: docker-archive
          release_name: Docker Archive ${{ env.DOCKER_IMAGE }} ${{ steps.release-name-output.outputs.release_name_suffix }}
          # release_name: Release at ${{ github.ref }}
          draft: false
          prerelease: false

      # 上传release,也即将构建物上传到github
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.UPLOAD_ARCHIVE_GITHUB_TOKEN }}
        with:
          # 这里的url为create_release步骤(上一个步骤[注意上个步骤的id])产出的url https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions

          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps

          asset_path: ${{ env.DOCKER_ARCHIVE_NAME }}
          asset_name: ${{ env.DOCKER_ARCHIVE_NAME }}
          asset_content_type: application/zip
